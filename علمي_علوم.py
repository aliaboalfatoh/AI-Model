# -*- coding: utf-8 -*-
"""علمي علوم.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1N6pOILahRJw5gHt6j5WFlNvxtjRgvhjo
"""





!pip install catboost

import pandas as pd
import numpy as np
from catboost import CatBoostClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, classification_report
from sklearn.preprocessing import OneHotEncoder
from sklearn.compose import ColumnTransformer

df = pd.read_csv('/content/Final_Dataset_with_Logic_Applied_to_Q15_and_Q16.csv')

num_duplicates = df.duplicated().sum()
print(f"عدد الصفوف المكررة: {num_duplicates}")

df.drop_duplicates(keep='first', inplace=True)

num_duplicates = df.duplicated().sum()
print(f"عدد الصفوف المكررة: {num_duplicates}")

df.isnull().sum()

df['Recommended_Major'] = df['Recommended_Major'].replace('Science', 'Faculty of Sciences')
df['Recommended_Major'] = df['Recommended_Major'].replace('Fine Arts', 'Faculty of Fine Arts')
df['Recommended_Major'] = df['Recommended_Major'].replace('Commerce', 'Faculty of Business Administration')
df['Recommended_Major'] = df['Recommended_Major'].replace('Applied Health Sciences', 'Higher Technological Institute for Applied Health Sciences')
df['Recommended_Major'] = df['Recommended_Major'].replace('Medicine', 'Faculty of Medicine')
df['Recommended_Major'] = df['Recommended_Major'].replace('Dentistry', 'Faculty of Oral and Dental Medicine')
df['Recommended_Major'] = df['Recommended_Major'].replace('Law', 'Faculty of Law')
df['Recommended_Major'] = df['Recommended_Major'].replace('Computer Science', 'Faculty of Computer Science')
df['Recommended_Major'] = df['Recommended_Major'].replace('Media', 'Faculty of Mass Communication')
df['Recommended_Major'] = df['Recommended_Major'].replace('Higher Institute of Administrative Sciences, Beni Suef', 'The Higher Institute of Administrative Sciences')
df['Recommended_Major'] = df['Recommended_Major'].replace('Nursing', 'Faculty of Nursing')
df['Recommended_Major'] = df['Recommended_Major'].replace('Nursing Technical Institute', 'Technological Nursing Institute')
df['Recommended_Major'] = df['Recommended_Major'].replace('Pharmacy', 'Faculty of Pharmacy')
df['Recommended_Major'] = df['Recommended_Major'].replace('Physical Therapy', 'Faculty of Physical Therapy')
df['Recommended_Major'] = df['Recommended_Major'].replace('College of Applied Sciences for Space and Navigation', 'Faculty of Applied Sciences for Space and Navigation')

value_counts = df['Recommended_Major'].value_counts()

print(value_counts)

q1_map = {
    "a": "Medical field",
      "b": "Technology and programming",
    "c": "Business and Management",
    "d": "Arts and Creativity"
}

q2_map = {
    "a": "Physics",
    "b": "Chemistry",
    "c": "Biology",
    "d": "Geology"
}

df["Q1"] = df["Q1"].map(q1_map)
df["Q2"] = df["Q2"].map(q2_map)

df = df.rename(columns={
    "Q1": "Where do you find yourself most passionate?",
    "Q2": "What are your favorite school subjects?",
    "Q3": "Do you feel scared or anxious at the sight of blood?",
    "Q4": "Are you interested in medical aesthetics and smile enhancement?",
    "Q5": "Do you prefer a field that combines medicine and technology?",
    "Q6": "Are you good with numbers and mathematical analysis?",
    "Q7": "Do you enjoy studying chemicals and medications?",
    "Q8": "Are you interested in learning programming?",
    "Q9": "Are you interested in photography and video editing?",
    "Q10": "Do you prefer a specialization that combines chemistry and biology?",
    "Q11": "Are you afraid of dealing with bacteria and viruses?",
    "Q12": "Do you enjoy subjects that involve mystery and exploration, such as space and the universe?",
    "Q13": "Do you enjoy the field of marketing and advertising?",
    "Q14": "Are you interested in studying law and the constitution?",
    "Q15": "Are you willing to learn treatment techniques using devices and exercises?",
    "Q16": "Do you prefer working in a lab?",
    "Q17": "Do you enjoy working in content creation or media?"







})

X = df.drop('Recommended_Major', axis=1)
y = df['Recommended_Major']

column_transformer = ColumnTransformer(
    transformers=[('ohe', OneHotEncoder(handle_unknown='ignore'), X.columns)],
    remainder='drop'
)

X_transformed = column_transformer.fit_transform(X)



X_train, X_test, y_train, y_test = train_test_split(X_transformed, y, test_size=0.2, random_state=42)

model = CatBoostClassifier(
    iterations=700,
    learning_rate=0.03,
    depth=6,
    l2_leaf_reg=7,
    random_seed=42,
    verbose=False,
)

model.fit(X_train, y_train, eval_set=(X_test, y_test), early_stopping_rounds=50)

y_pred = model.predict(X_test)
acc = accuracy_score(y_test, y_pred)
report = classification_report(y_test, y_pred)

print(f" Accuracy: {acc * 100:.2f}%")

import json

with open("/content/college_min_scores_science_math.json", "r", encoding="utf-8") as f:
    college_min_scores = json.load(f)

y_train_pred = model.predict(X_train)
y_test_pred = model.predict(X_test)

from sklearn.metrics import accuracy_score

train_acc = accuracy_score(y_train, y_train_pred)
test_acc = accuracy_score(y_test, y_test_pred)

print("Train Accuracy:", train_acc)
print("Test Accuracy:", test_acc)

import json

def load_college_min_scores(json_path):
    with open(json_path, "r", encoding="utf-8") as f:
        return json.load(f)

def rule_based_filter(answers):
    excluded = []
    if answers["Do you feel scared or anxious at the sight of blood?"] == "Yes":
        excluded += ["Faculty of Medicine", "Faculty of Oral and Dental Medicine", "Faculty of Nursing", "Technological Nursing Institute"]
    if answers["Do you enjoy studying chemicals and medications?"] == "No":
        excluded += ["Faculty of Pharmacy"]
    if answers["Are you interested in learning programming?"] == "No":
        excluded += ["Faculty of Computer Science"]
    if answers["Are you afraid of dealing with bacteria and viruses?"] == "Yes":
        excluded += ["Faculty of Science"]
    if answers["Are you interested in studying law and the constitution?"] == "No":
        excluded += ["Faculty of Law"]
    return excluded

def recommend_college_with_score_priority(model, answers, transformer, min_score, college_min_scores):
    input_df = pd.DataFrame([answers])
    encoded_input = transformer.transform(input_df)
    probs = model.predict_proba(encoded_input)[0]
    classes = list(model.classes_)

    excluded = rule_based_filter(answers)

    eligible_majors = [
        major for major in classes
        if major not in excluded and min_score >= college_min_scores.get(major, 0)
    ]

    if not eligible_majors:
        return " No College  "


    eligible_majors_sorted = sorted(
        eligible_majors,
        key=lambda m: college_min_scores.get(m, 0),
        reverse=True
    )


    return eligible_majors_sorted[0]


college_min_scores = load_college_min_scores("college_min_scores_science_math.json")

example_answers = {
    "Where do you find yourself most passionate?": "Medical field", #1
    "What are your favorite school subjects?": "Biology", #2
    "Do you feel scared or anxious at the sight of blood?": "No", #3
    "Are you interested in medical aesthetics and smile enhancement?": "No",#4
    "Do you prefer a field that combines medicine and technology?": "No",#5
    "Are you good with numbers and mathematical analysis?": "Yes",#6
    "Do you enjoy studying chemicals and medications?": "Yes",#7
    "Are you interested in learning programming?": "No",#8
    "Are you interested in photography and video editing?": "No",#9
    "Do you prefer a specialization that combines chemistry and biology?": "Yes",#10
    "Are you afraid of dealing with bacteria and viruses?": "No",#11
    "Do you enjoy subjects that involve mystery and exploration, such as space and the universe?": "No",#12
    "Do you enjoy the field of marketing and advertising?": "Yes",#13
    "Are you interested in studying law and the constitution?": "Yes",#14
    "Are you willing to learn treatment techniques using devices and exercises?": "Yes",#15
    "Do you prefer working in a lab?": "Yes",#16
    "Do you enjoy working in content creation or media?": "No"#17
}

min_score = 70

recommended_college = recommend_college_with_score_priority(
    model=model,
    answers=example_answers,
    transformer=column_transformer,
    min_score=min_score,
    college_min_scores=college_min_scores
)
print("الكلية :", recommended_college)

# def final_recommendation(student_data, model, transformer, min_score, top_n=5):
#     import pandas as pd
#     import joblib
#     import json
#     import numpy as np

#     # فصل Min_Score عن باقي الأسئلة
#     input_data = {k: v for k, v in student_data.items() if k != "Min_Score"}
#     input_df = pd.DataFrame([input_data])
#     transformed_input = transformer.transform(input_df)

#     # توقع احتمالات كل الكليات
#     proba = model.predict_proba(transformed_input)[0]
#     classes = model.classes_

#     # تحميل الحدود الدنيا للكليات
#     with open("college_min_scores.json") as f:
#         min_scores = json.load(f)

#     # ترتيب الكليات حسب أعلى احتمالية
#     top_indices = np.argsort(proba)[::-1]  # من الأعلى إلى الأقل

#     for idx in top_indices:
#         college = classes[idx]
#         required_score = min_scores.get(college, 0)
#         if min_score >= required_score:
#             return college  # أول كلية مجموعها مناسب

#     return " لا توجد كلية مناسبة لدرجتك الحالية والميول المقدمة."

import pickle

with open("catboost_model_onehot.pkl", "wb") as f:
    pickle.dump(model, f)

with open("onehot_transformer.pkl", "wb") as f:
    pickle.dump(column_transformer, f)

import pickle

with open("catboost_model_onehot.pkl", "wb") as f:
    pickle.dump(model, f)

with open("onehot_transformer.pkl", "wb") as f:
    pickle.dump(column_transformer, f)

model.save_model("catboost_model.cbm", format="cbm")

with open("new_onehot_transformer.pkl", "wb") as f:
    pickle.dump(transformer, f)

with open("onehot_transformer.pkl", "rb") as f:
    transformer = pickle.load(f)

# إعادة الحفظ
with open("new_onehot_transformer.pkl", "wb") as f:
    pickle.dump(transformer, f)

import pickle
import joblib

with open("onehot_transformer.pkl", "rb") as f:
    transformer = pickle.load(f)

joblib.dump(transformer, "transformer_compatible.joblib")