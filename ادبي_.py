# -*- coding: utf-8 -*-
"""ادبي .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CqVjJmQDI97S4izKcfoXAR9PSLtn4K2J
"""







!pip install catboost

import pandas as pd
import numpy as np
from catboost import CatBoostClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, classification_report
from sklearn.preprocessing import OneHotEncoder
from sklearn.compose import ColumnTransformer

df = pd.read_csv('/content/Student_Major_DiverseBalanced.csv')

num_duplicates = df.duplicated().sum()
print(f"عدد الصفوف المكررة: {num_duplicates}")

df.drop_duplicates(keep='first', inplace=True)

num_duplicates = df.duplicated().sum()
print(f"عدد الصفوف المكررة: {num_duplicates}")

df

df['Recommended_Major'].value_counts()

df['Recommended_Major'] = df['Recommended_Major'].replace('Fine Arts', 'Faculty of Fine Arts')
df['Recommended_Major'] = df['Recommended_Major'].replace('Commerce', 'Faculty of Business Administration')
df['Recommended_Major'] = df['Recommended_Major'].replace('Applied Health Sciences', 'Higher Technological Institute for Applied Health Sciences')
df['Recommended_Major'] = df['Recommended_Major'].replace('Law', 'Faculty of Law')
df['Recommended_Major'] = df['Recommended_Major'].replace('Media', 'Faculty of Mass Communication')
df['Recommended_Major'] = df['Recommended_Major'].replace('Higher Institute of Administrative Sciences, Beni Suef', 'The Higher Institute of Administrative Sciences')

value_counts = df['Recommended_Major'].value_counts()

print(value_counts)

value_counts = df['Recommended_Major'].value_counts()

print(value_counts)

q1_map = {
    "a": "Law and Constitution",
    "b": "Business and Management",
    "c": "Arts and Creativity"
}

q2_map = {
    "a": "Geography",
    "b": "History",
    "c": "Philosophy and Logic",
    "d": "Economics and Statistics"
}

df["Q1"] = df["Q1"].map(q1_map)
df["Q2"] = df["Q2"].map(q2_map)

df = df.rename(columns={
    "Q1": "Where do you find yourself most passionate?",
    "Q2": "Which academic subjects do you prefer?",
    "Q3": "Do you enjoy writing and reading articles?",
    "Q4": "Do you like the field of marketing and advertising?",
    "Q5": "Are you interested in studying human behavior and psychological patterns?",
    "Q6": "Are you good at working with numbers and analytical thinking?",
    "Q7": "Do you have a passion for studying law?",
    "Q8": "Do you enjoy photography and video editing?",
    "Q9": "Do you enjoy analyzing literary texts and symbolism?",
    "Q10": "Are you interested in social and cultural issues and enjoy discussing them?"
})

X = df.drop('Recommended_Major', axis=1)
y = df['Recommended_Major']

column_transformer = ColumnTransformer(
    transformers=[('ohe', OneHotEncoder(handle_unknown='ignore'), X.columns)],
    remainder='drop'
)

X_transformed = column_transformer.fit_transform(X)



X_train, X_test, y_train, y_test = train_test_split(X_transformed, y, test_size=0.2, random_state=42)

model = CatBoostClassifier(
    iterations=700,
    learning_rate=0.03,
    depth=6,
    l2_leaf_reg=7,
    random_seed=42,
    verbose=False,
)

model.fit(X_train, y_train, eval_set=(X_test, y_test), early_stopping_rounds=50)



y_pred = model.predict(X_test)
acc = accuracy_score(y_test, y_pred)
report = classification_report(y_test, y_pred)

print(f" Accuracy: {acc * 100:.2f}%")

import json

with open("/content/college_min_scores.json", "r", encoding="utf-8") as f:
    college_min_scores = json.load(f)

import json

def load_college_min_scores(json_path):
    with open(json_path, "r", encoding="utf-8") as f:
        return json.load(f)

def rule_based_filter(answers):
    excluded = []
    if answers["Are you interested in studying human behavior and psychological patterns?"] == "No":
        excluded += ["Faculty of Arts"]
    if answers["Do you enjoy writing and reading articles?"] == "No":
        excluded += ["Faculty of Media"]
    if answers["Do you have a passion for studying law?"] == "No":
        excluded += ["Faculty of Law"]
    return excluded

def recommend_college_with_score_priority(model, answers, transformer, min_score, college_min_scores):
    input_df = pd.DataFrame([answers])
    encoded_input = transformer.transform(input_df)
    probs = model.predict_proba(encoded_input)[0]
    classes = list(model.classes_)

    excluded = rule_based_filter(answers)

    eligible_majors = [
        major for major in classes
        if major not in excluded and min_score >= college_min_scores.get(major, 0)
    ]

    if not eligible_majors:
        return " No College  "


    eligible_majors_sorted = sorted(
        eligible_majors,
        key=lambda m: college_min_scores.get(m, 0),
        reverse=True
    )


    return eligible_majors_sorted[0]


college_min_scores = load_college_min_scores("/content/college_min_scores.json")

example_answers = {

        "Where do you find yourself most passionate?" : "Business and Management",
        "Which academic subjects do you prefer?" : "Geography",
         "Do you enjoy writing and reading articles?" : "Yes",
         "Do you like the field of marketing and advertising?" : "No",
         "Are you interested in studying human behavior and psychological patterns?" : "Yes",
         "Are you good at working with numbers and analytical thinking?" : "Yes",
         "Do you have a passion for studying law?" : "Yes",
         "Do you enjoy photography and video editing?" : "Yes",
         "Do you enjoy analyzing literary texts and symbolism?" : "Yes",
         "Are you interested in social and cultural issues and enjoy discussing them?" : "Yes",
}

min_score = 70

recommended_college = recommend_college_with_score_priority(
    model=model,
    answers=example_answers,
    transformer=column_transformer,
    min_score=min_score,
    college_min_scores=college_min_scores
)
print("الكلية :", recommended_college)

import pickle

with open("catboost_model_onehot.pkl", "wb") as f:
    pickle.dump(model, f)

with open("onehot_transformer.pkl", "wb") as f:
    pickle.dump(column_transformer, f)

import pickle

with open("catboost_model_onehot.pkl", "wb") as f:
    pickle.dump(model, f)

with open("onehot_transformer.pkl", "wb") as f:
    pickle.dump(column_transformer, f)







